{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "network.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [
        "0aDAEb4kLdA9"
      ],
      "include_colab_link": true
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.3"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mferri17/amazon-reviews-sentiment-network-analysis/blob/master/Update%20network%20analysis\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ysBCOUbpLc_k",
        "colab_type": "text"
      },
      "source": [
        "# Amazon Reviews Network Analysis - Ferri Marco, Basso Matteo"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FpMdBSI2Lc_l",
        "colab_type": "text"
      },
      "source": [
        "This project aims to experiment with network analysis on [Amazon Reviews](http://jmcauley.ucsd.edu/data/amazon/) in order to build a collaborative filtering model."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LfwyCK9SLc_m",
        "colab_type": "text"
      },
      "source": [
        "## Dataset"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lxwEn1LnX2Kx",
        "colab_type": "text"
      },
      "source": [
        "### Dependencies"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": false,
        "id": "ATRnE5hmLc_n",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import os\n",
        "import gzip\n",
        "import fileinput\n",
        "import sys\n",
        "import datetime\n",
        "import io\n",
        "import urllib\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from fastai.collab import *\n",
        "from sklearn.utils import resample"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ivh_vmWKLc_r",
        "colab_type": "text"
      },
      "source": [
        "### Reading"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HFHgiBhULc_s",
        "colab_type": "text"
      },
      "source": [
        "\n",
        "Util functions to read from JSON and convert into pandas dataframe:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": false,
        "id": "dS8W2vxFLc_t",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def parse(path):\n",
        "  g = gzip.open(path, 'rb')\n",
        "  for l in g:\n",
        "    yield eval(l)\n",
        "\n",
        "def getDF(path):\n",
        "  df = []\n",
        "  for d in parse(path):\n",
        "    df.append(d)\n",
        "  return pd.DataFrame(df)\n",
        "\n",
        "def read_dataset(dataset):      \n",
        "  basepath = r\"datasets\\amazon-5-core\"\n",
        "  df = getDF(os.path.join(basepath, dataset))\n",
        "  return df\n",
        "  \n",
        "def download_dataset(dataset):\n",
        "  request = urllib.request.Request('http://snap.stanford.edu/data/amazon/productGraph/categoryFiles/' + dataset)\n",
        "  request.add_header('Accept-encoding', 'gzip')\n",
        "  response = urllib.request.urlopen(request)\n",
        "  buf = io.BytesIO(response.read())\n",
        "  file = gzip.GzipFile(fileobj=buf)\n",
        "  df = []\n",
        "  for line in file:\n",
        "    df.append(eval(line))\n",
        "  return pd.DataFrame(df)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vTmIPVTqLc_v",
        "colab_type": "text"
      },
      "source": [
        "Reading from JSON"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": false,
        "id": "GVoQ1KOhLc_w",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        },
        "outputId": "96bc37fe-eb3a-4ddf-c70e-ae09fa8df695"
      },
      "source": [
        "#%time dfull = read_dataset(\"reviews_Video_Games_5.json.gz\")\n",
        "%time dfull = download_dataset('reviews_Clothing_Shoes_and_Jewelry_5.json.gz')"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "CPU times: user 12 s, sys: 373 ms, total: 12.4 s\n",
            "Wall time: 20.3 s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8FFQDmglLc_9",
        "colab_type": "text"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XzU2ogWCLc_-",
        "colab_type": "text"
      },
      "source": [
        "###  Description"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JLiIbGc_Lc__",
        "colab_type": "text"
      },
      "source": [
        "#### Schema"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": false,
        "id": "qAnGOIo2Lc__",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "62c167bb-01db-4f28-9f74-a22ed2e2e373"
      },
      "source": [
        "print(\"(rows, cols) = \", dfull.shape)"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(rows, cols) =  (278677, 9)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": false,
        "id": "vs35GBUdLc_3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "dfull = dfull.rename(index=str, columns={\"asin\": \"productID\", \n",
        "                                         \"reviewerID\": \"userID\", \n",
        "                                         \"reviewerName\": \"userName\",\n",
        "                                         \"reviewText\": \"text\",\n",
        "                                         \"overall\": \"rating\"})"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": false,
        "id": "eMz4oHsOLdAE",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 252
        },
        "outputId": "22475e59-4a77-489c-d8d2-ac901d0f787c"
      },
      "source": [
        "dfull.info()"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 278677 entries, 0 to 278676\n",
            "Data columns (total 9 columns):\n",
            "productID         278677 non-null object\n",
            "helpful           278677 non-null object\n",
            "rating            278677 non-null float64\n",
            "text              278677 non-null object\n",
            "reviewTime        278677 non-null object\n",
            "userID            278677 non-null object\n",
            "userName          278225 non-null object\n",
            "summary           278677 non-null object\n",
            "unixReviewTime    278677 non-null int64\n",
            "dtypes: float64(1), int64(1), object(7)\n",
            "memory usage: 21.3+ MB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": false,
        "id": "FfB3d-ZJLdAJ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        },
        "outputId": "9e5c0043-5928-466c-efb4-0d57f8925409"
      },
      "source": [
        "dfull.head(3)"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>productID</th>\n",
              "      <th>helpful</th>\n",
              "      <th>rating</th>\n",
              "      <th>text</th>\n",
              "      <th>reviewTime</th>\n",
              "      <th>userID</th>\n",
              "      <th>userName</th>\n",
              "      <th>summary</th>\n",
              "      <th>unixReviewTime</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0000031887</td>\n",
              "      <td>[0, 0]</td>\n",
              "      <td>5.0</td>\n",
              "      <td>This is a great tutu and at a really great pri...</td>\n",
              "      <td>02 12, 2011</td>\n",
              "      <td>A1KLRMWW2FWPL4</td>\n",
              "      <td>Amazon Customer \"cameramom\"</td>\n",
              "      <td>Great tutu-  not cheaply made</td>\n",
              "      <td>1297468800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0000031887</td>\n",
              "      <td>[0, 0]</td>\n",
              "      <td>5.0</td>\n",
              "      <td>I bought this for my 4 yr old daughter for dan...</td>\n",
              "      <td>01 19, 2013</td>\n",
              "      <td>A2G5TCU2WDFZ65</td>\n",
              "      <td>Amazon Customer</td>\n",
              "      <td>Very Cute!!</td>\n",
              "      <td>1358553600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0000031887</td>\n",
              "      <td>[0, 0]</td>\n",
              "      <td>5.0</td>\n",
              "      <td>What can I say... my daughters have it in oran...</td>\n",
              "      <td>01 4, 2013</td>\n",
              "      <td>A1RLQXYNCMWRWN</td>\n",
              "      <td>Carola</td>\n",
              "      <td>I have buy more than one</td>\n",
              "      <td>1357257600</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    productID helpful  ...                        summary unixReviewTime\n",
              "0  0000031887  [0, 0]  ...  Great tutu-  not cheaply made     1297468800\n",
              "1  0000031887  [0, 0]  ...                    Very Cute!!     1358553600\n",
              "2  0000031887  [0, 0]  ...       I have buy more than one     1357257600\n",
              "\n",
              "[3 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d-SJ_j0eLdAO",
        "colab_type": "text"
      },
      "source": [
        "### Users and products"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": false,
        "id": "z5WL24eHLdAP",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 101
        },
        "outputId": "abb934b9-b426-46f9-f2bf-cc8d05d316ab"
      },
      "source": [
        "(rows,cols) = dfull.shape\n",
        "n_users = dfull['userID'].nunique()\n",
        "n_products = dfull['productID'].nunique()\n",
        "print(\"Number of REVIEWS: \", rows)\n",
        "print(\"Number of USERS: \", n_users)\n",
        "print(\"Number of PRODUCTS: \", n_products)\n",
        "print(\"Average REVIEWS PER USER: \", rows/n_users)\n",
        "print(\"Average REVIEWS PER PRODUCT: \", rows/n_products)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of REVIEWS:  278677\n",
            "Number of USERS:  39387\n",
            "Number of PRODUCTS:  23033\n",
            "Average REVIEWS PER USER:  7.075354812501587\n",
            "Average REVIEWS PER PRODUCT:  12.099031823904832\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0aDAEb4kLdA9",
        "colab_type": "text"
      },
      "source": [
        "### Manipulation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9DDZraswLdA-",
        "colab_type": "text"
      },
      "source": [
        "#### Rejecting columns"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "PAY_rpPiLdA_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "dfull = dfull.drop(['helpful', 'reviewTime', 'unixReviewTime', 'userName', 'text', 'summary', 'sentiment'], axis = 1, errors = 'ignore')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N8zqHOgXbrVK",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "dfull.info()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-YoecvNDLdBB",
        "colab_type": "text"
      },
      "source": [
        "#### Binarization\n",
        "\n",
        "Since target variable (`rating`) is strongly unbalanced between low and high values, it is preferable to reduce the problem from multi-class to binary. Later on, some technique to manage unbalancement will be applied to the dataset, in order to fill the gap between the two binary classes.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "APold7gTLdBB",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# dfull['sentiment'] = ['positive' if r > 3 else 'negative' for r in dfull['rating']]\n",
        "\n",
        "# print(\"Sentiment count\")\n",
        "# dfull['sentiment'].value_counts()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "QD4mUbkXClLl"
      },
      "source": [
        "#### Undersampling\n",
        "\n",
        "As previously seen, target column (`rating`) is strongly unbalanced towards the positive class. Undersampling of the majority class is necessary here to achieve good machine learning preformances later. This mainly afftects prediction models *recall* metric."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "6zu_9j7OClKU",
        "colab": {}
      },
      "source": [
        "\n",
        "# # Separate majority and minority classes\n",
        "# positive_count = dfull['sentiment'].value_counts()['positive']\n",
        "# negative_count = dfull['sentiment'].value_counts()['negative']\n",
        "# df_majority = dfull[dfull.sentiment==('positive' if positive_count >= negative_count else 'negative')]\n",
        "# df_minority = dfull[dfull.sentiment==('negative' if positive_count >= negative_count else 'positive')]\n",
        " \n",
        "# # Downsample majority class\n",
        "# obj_samples = negative_count if positive_count >= negative_count else positive_count\n",
        "# df_majority_downsampled = resample(df_majority, \n",
        "#                                  replace=False,\n",
        "#                                  n_samples = obj_samples, # match minority class\n",
        "#                                  random_state=123) # reproducible results\n",
        " \n",
        "# # Combine minority class with downsampled majority class\n",
        "# df_downsampled = pd.concat([df_majority_downsampled, df_minority])\n",
        " \n",
        "# # Display new class counts\n",
        "# print(\"Positive/negative distribution post-undersampling\")\n",
        "# df_downsampled['sentiment'].value_counts()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "OAhCE9lzCkhK"
      },
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qTIISXJJLdAm",
        "colab_type": "text"
      },
      "source": [
        "***"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-CoDGz6RcTCl",
        "colab_type": "text"
      },
      "source": [
        "## Network Graph"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "347WYNwCkFtD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import scipy.sparse as sparse\n",
        "import networkx as nx"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1c3Xw2PXMxhf",
        "colab_type": "text"
      },
      "source": [
        "**Reducing dataset**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Zzc6bCkxNjJP",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "769180b9-13e7-4947-c5f1-d0a48239f4fb"
      },
      "source": [
        "print('Original reviews: ', len(dfull))"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Original reviews:  278677\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Lunp23IIMxm2",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "18843500-85af-4232-b281-39d32fdb7077"
      },
      "source": [
        "dfnet = dfull #[(dfull['date'] > '2014-04-01')]\n",
        "print('Reduced reviews: ', len(dfnet))"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Reduced reviews:  278677\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HWtc4TPN-VXR",
        "colab_type": "text"
      },
      "source": [
        "**Creating graph from Pandas data frame**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9SACLesv-Vni",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "f8e330e0-e29f-4348-cc0d-af5d6b4e3cfe"
      },
      "source": [
        "graph = nx.from_pandas_edgelist(df = dfnet, source = 'userID', target = 'productID', edge_attr = 'rating', create_using = nx.DiGraph)\n",
        "graph"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<networkx.classes.digraph.DiGraph at 0x7f416bb2c438>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LjIHb_j2IQ1Y",
        "colab_type": "text"
      },
      "source": [
        "**Assertions**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VlQoMvoMIPdu",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 101
        },
        "outputId": "23a173f8-8c74-49c8-a5e7-1b02d5dfe093"
      },
      "source": [
        "net_users = dfnet.userID.nunique()\n",
        "net_products = dfnet.productID.nunique()\n",
        "\n",
        "\n",
        "edges = nx.number_of_edges(graph)\n",
        "nodes = nx.number_of_nodes(graph)\n",
        "\n",
        "assert edges == len(dfnet), 'wrong edge numbers (it must corresponds to record numbers = reviews)'\n",
        "assert nodes == net_users + net_products, 'wrong nodes numbers (it must corresponds to number of users plus number of products)'\n",
        "print(\"Edges (reviews): \", edges)\n",
        "print(\"Nodes (users + products): \", nodes)\n",
        "\n",
        "print()\n",
        "\n",
        "givers_nodes = [node_degree for node_degree in graph.out_degree() if node_degree[1] > 0]\n",
        "receivers_nodes = [node_degree for node_degree in graph.in_degree() if node_degree[1] > 0]\n",
        "\n",
        "assert len(givers_nodes) == net_users, 'source nodes differ from users'\n",
        "assert len(receivers_nodes) == net_products, 'target nodes differ from products'\n",
        "print(\"Users nodes: \", len(givers_nodes))\n",
        "print(\"Products nodes: \", len(receivers_nodes))"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Edges (reviews):  278677\n",
            "Nodes (users + products):  62420\n",
            "\n",
            "Users nodes:  39387\n",
            "Products nodes:  23033\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8s4vqvAyLKN_",
        "colab_type": "text"
      },
      "source": [
        "**Example**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FmQIU0JOIfEu",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 121
        },
        "outputId": "26cd43fc-3b8e-47bf-d453-4cd3e38d52a2"
      },
      "source": [
        "userID = dfnet.head(1)['userID'][0]\n",
        "productID = dfnet.head(1)['productID'][0]\n",
        "\n",
        "print('Products reviewed by user', userID, ':\\n', list(graph.successors(userID)))\n",
        "print()\n",
        "print('Users who reviewed product', productID, ':\\n', list(graph.predecessors(productID)))"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Products reviewed by user A1KLRMWW2FWPL4 :\n",
            " ['0000031887', 'B000FH4JJQ', 'B002NPCJ5E', 'B003U3GOFO', 'B00400N6XE', 'B008NBSBHW', 'B009H6NPBE']\n",
            "\n",
            "Users who reviewed product 0000031887 :\n",
            " ['A1KLRMWW2FWPL4', 'A2G5TCU2WDFZ65', 'A1RLQXYNCMWRWN', 'A8U3FAMSJVHS5', 'A3GEOILWLK86XM', 'A27UF1MSF3DB2', 'A16GFPNVF4Y816', 'A2M2APVYIB2U6K', 'A1NJ71X3YPQNQ9', 'A3EERSWHAI6SO', 'AX1QE6IR7CHXM', 'A2A2WZYLU528RO', 'A391EXIT5TFP72', 'A34ATJR9KFIXL9', 'AJ6B83I4YJHYW', 'A26A4KKLAVTMCC', 'A1MXJVYXE2QU6H', 'A2XJ13PIXVJFJH', 'A287XY94U7JDM8', 'A1JR9KKF6UKUWW', 'A2SX7X8QGQVCJU', 'A2Q6UWR5PBHTJS', 'AJZPHJR944IBB']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8IWjtDChBu7J",
        "colab_type": "text"
      },
      "source": [
        "**Saving to graphML file**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wQwI9o7L_-ru",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# from google.colab import drive\n",
        "# drive.mount('/content/drive')\n",
        "# drivepath = '/content/drive/My Drive/Data Analytics/'\n",
        "\n",
        "# nx.write_graphml(graph, drivepath + 'test.graphml')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vmEKV8pTci6L",
        "colab_type": "text"
      },
      "source": [
        "## Centrality Measures"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a6xLl8fdRozv",
        "colab_type": "text"
      },
      "source": [
        "### Degree"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5GpcgwBz6-HT",
        "colab_type": "text"
      },
      "source": [
        "**In-degree (reviews received)**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t1cd1c-3zNct",
        "colab_type": "code",
        "outputId": "cad6f9a7-8d62-4300-9120-b2d491fbec70",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        }
      },
      "source": [
        "in_degrees = [x[1] for x in graph.in_degree]\n",
        "degreeCount = collections.Counter(in_degrees)\n",
        "deg, cnt = zip(*degreeCount.items()) # unroll (degree, count) into different lists for matplotlib\n",
        "plt.bar(deg, cnt, log = True)"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<BarContainer object of 153 artists>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WQX0B91x6_vT",
        "colab_type": "text"
      },
      "source": [
        "**Out-degree (reviews given)**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AjKbtNPt4Ena",
        "colab_type": "code",
        "outputId": "6c0095e1-21ec-4c77-924f-4039cae89ccb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        }
      },
      "source": [
        "out_degrees = [x[1] for x in graph.out_degree]\n",
        "degreeCount = collections.Counter(out_degrees)\n",
        "deg, cnt = zip(*degreeCount.items()) # unroll (degree, count) into different lists for matplotlib\n",
        "plt.bar(deg, cnt, log = True)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<BarContainer object of 57 artists>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 223
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "_SMNwXnNg0Ft"
      },
      "source": [
        "## Collaborative Filtering"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KG60zI3ej7zi",
        "colab_type": "text"
      },
      "source": [
        "### Undersampling"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q73WV2NQ0_4d",
        "colab_type": "code",
        "outputId": "555fd160-2bfb-4abc-b32e-4412d54b4bb2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        }
      },
      "source": [
        "dfull['rating'].hist()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fcd1da53e48>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mx-TDVX0zQUl",
        "colab_type": "code",
        "outputId": "10a8d175-476e-4ad2-84e0-9c2caab90153",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        }
      },
      "source": [
        "# # Separate majority and minority classes\n",
        "df_minority = dfull[(dfull.rating!=5) & (dfull.rating!=4)]\n",
        "df_4 = dfull[dfull.rating==4]\n",
        "df_5 = dfull[dfull.rating==5]\n",
        "resampling_count = dfull['rating'].value_counts()[3]\n",
        " \n",
        "# Downsample majority class\n",
        "df_4_down = resample(df_4, \n",
        "                     replace=False,\n",
        "                     n_samples = resampling_count,\n",
        "                     random_state=123) # reproducible results\n",
        "\n",
        "# Downsample majority class\n",
        "df_5_down = resample(df_5, \n",
        "                     replace=False,\n",
        "                     n_samples = resampling_count,\n",
        "                     random_state=123) # reproducible results\n",
        " \n",
        "# Combine minority class with downsampled majority class\n",
        "df_downsampled = pd.concat([df_minority, df_4_down, df_5_down])\n",
        " \n",
        "# Display new class counts\n",
        "df_downsampled['rating'].hist()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fcd1eb5a0f0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n1MoAPVpzMro",
        "colab_type": "text"
      },
      "source": [
        "### Creating dataset for collaborative filtering"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EI_CbWodltkc",
        "colab_type": "code",
        "outputId": "35dcf0c7-d2b5-4620-e82b-c5f2363dcc0f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 168
        }
      },
      "source": [
        "dflearn = df_downsampled\n",
        "dflearn.info()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 117930 entries, 15 to 262698\n",
            "Data columns (total 4 columns):\n",
            "productID    117930 non-null category\n",
            "rating       117930 non-null float64\n",
            "userID       117930 non-null category\n",
            "date         117930 non-null datetime64[ns]\n",
            "dtypes: category(2), datetime64[ns](1), float64(1)\n",
            "memory usage: 5.7+ MB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lV_9QwGXqQpF",
        "colab_type": "code",
        "outputId": "2846e3f8-b696-4461-edb7-18b0ccd63d3b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 151
        }
      },
      "source": [
        "# converting strings to categories\n",
        "series2cat(dflearn, 'productID', 'userID')\n",
        "\n",
        "# reordering columns for fastai standard format\n",
        "dflearn = dflearn[['userID', 'productID', 'rating']]\n",
        "dflearn.info()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 117930 entries, 15 to 262698\n",
            "Data columns (total 3 columns):\n",
            "userID       117930 non-null category\n",
            "productID    117930 non-null category\n",
            "rating       117930 non-null float64\n",
            "dtypes: category(2), float64(1)\n",
            "memory usage: 4.8+ MB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-MonBiMsojxd",
        "colab_type": "code",
        "outputId": "9054f06f-1e88-41e4-9345-a14a983c7441",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        }
      },
      "source": [
        "# creating collaborative filtering dataset\n",
        "data = CollabDataBunch.from_df(dflearn, seed=42, valid_pct = 0.2)\n",
        "data.show_batch()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>userID</th>\n",
              "      <th>productID</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <td>A2KQT4D0OZR569</td>\n",
              "      <td>B0031Y717M</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>A2VUK2EWNL3MXG</td>\n",
              "      <td>B000KH78W6</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>A2WF82910Z50CT</td>\n",
              "      <td>B003DHSE6O</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>A3I9NBDCSOCSIF</td>\n",
              "      <td>B000GELEZ0</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>A28HIMM956GSD5</td>\n",
              "      <td>B0078FPDUM</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5x92tB2ZLj0S",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "n_cicles = 5"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4Fc5UOGeKtF3",
        "colab_type": "text"
      },
      "source": [
        "### EmbeddingDotBias"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wbl4My1Qx3-5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "learn = collab_learner(data, n_factors=50, y_range=(1,5), use_nn = False, callback_fns=ShowGraph)\n",
        "#learn.loss_func = torch.nn.MSELoss() # changing loss function (default is MSE)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rmVBvXIQA1-w",
        "colab_type": "code",
        "outputId": "e916baba-c6d4-4c1a-a85d-90176067609c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        }
      },
      "source": [
        "# learn.unfreeze()\n",
        "learn.lr_find() # find learning rate\n",
        "learn.recorder.plot(suggestion = True) # plot learning rate graph"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              ""
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "LR Finder is complete, type {learner_name}.recorder.plot() to see the graph.\n",
            "Min numerical gradient: 9.12E-07\n",
            "Min loss divided by 10: 2.75E-07\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b_4v9L1dsbg4",
        "colab_type": "code",
        "outputId": "e4912ca0-dee5-47de-92b4-6cc18be4842e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "print('Training results')\n",
        "learn.fit_one_cycle(n_cicles, 5e-3, wd=0.1)\n",
        "\n",
        "# learn.save('amazon-reviews-dot-1')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Training results\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "    <div>\n",
              "        <style>\n",
              "            /* Turns off some styling */\n",
              "            progress {\n",
              "                /* gets rid of default border in Firefox and Opera. */\n",
              "                border: none;\n",
              "                /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
              "                background-size: auto;\n",
              "            }\n",
              "            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
              "                background: #F44336;\n",
              "            }\n",
              "        </style>\n",
              "      <progress value='4' class='' max='5', style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
              "      80.00% [4/5 00:44<00:11]\n",
              "    </div>\n",
              "    \n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: left;\">\n",
              "      <th>epoch</th>\n",
              "      <th>train_loss</th>\n",
              "      <th>valid_loss</th>\n",
              "      <th>time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <td>0</td>\n",
              "      <td>1.491977</td>\n",
              "      <td>1.708190</td>\n",
              "      <td>00:10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1</td>\n",
              "      <td>1.398625</td>\n",
              "      <td>1.693807</td>\n",
              "      <td>00:10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2</td>\n",
              "      <td>1.247679</td>\n",
              "      <td>1.684186</td>\n",
              "      <td>00:10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>3</td>\n",
              "      <td>1.144572</td>\n",
              "      <td>1.680270</td>\n",
              "      <td>00:10</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table><p>\n",
              "\n",
              "    <div>\n",
              "        <style>\n",
              "            /* Turns off some styling */\n",
              "            progress {\n",
              "                /* gets rid of default border in Firefox and Opera. */\n",
              "                border: none;\n",
              "                /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
              "                background-size: auto;\n",
              "            }\n",
              "            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
              "                background: #F44336;\n",
              "            }\n",
              "        </style>\n",
              "      <progress value='0' class='progress-bar-interrupted' max='1474', style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
              "      Interrupted\n",
              "    </div>\n",
              "    "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nEmc5qhJQqYYAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-114-72871bfd6114>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Training results'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_one_cycle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_cicles\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1e-3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwd\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# learn.save('amazon-reviews-dot-1')\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/fastai/train.py\u001b[0m in \u001b[0;36mfit_one_cycle\u001b[0;34m(learn, cyc_len, max_lr, moms, div_factor, pct_start, final_div, wd, callbacks, tot_epochs, start_epoch)\u001b[0m\n\u001b[1;32m     20\u001b[0m     callbacks.append(OneCycleScheduler(learn, max_lr, moms=moms, div_factor=div_factor, pct_start=pct_start,\n\u001b[1;32m     21\u001b[0m                                        final_div=final_div, tot_epochs=tot_epochs, start_epoch=start_epoch))\n\u001b[0;32m---> 22\u001b[0;31m     \u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcyc_len\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_lr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwd\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mwd\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mlr_find\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlearn\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mLearner\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_lr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mFloats\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1e-7\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend_lr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mFloats\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_it\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstop_div\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mbool\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwd\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/fastai/basic_train.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, epochs, lr, wd, callbacks)\u001b[0m\n\u001b[1;32m    198\u001b[0m         \u001b[0mcallbacks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcb\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcallback_fns\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mlistify\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdefaults\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextra_callback_fns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mlistify\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    199\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdefaults\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextra_callbacks\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mcallbacks\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mdefaults\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextra_callbacks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 200\u001b[0;31m         \u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetrics\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    201\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    202\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mcreate_opt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mFloats\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwd\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mFloats\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m->\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/fastai/basic_train.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(epochs, learn, callbacks, metrics)\u001b[0m\n\u001b[1;32m     97\u001b[0m             \u001b[0mcb_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_dl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_dl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m             \u001b[0mcb_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_epoch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 99\u001b[0;31m             \u001b[0;32mfor\u001b[0m \u001b[0mxb\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0myb\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mprogress_bar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_dl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparent\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpbar\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    100\u001b[0m                 \u001b[0mxb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcb_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m                 \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mloss_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloss_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcb_handler\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/fastprogress/fastprogress.py\u001b[0m in \u001b[0;36m__iter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     70\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m             \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mo\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_gen\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mi\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtotal\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m                 \u001b[0;32myield\u001b[0m \u001b[0mo\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/fastai/basic_data.py\u001b[0m in \u001b[0;36m__iter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     73\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__iter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m         \u001b[0;34m\"Process and returns items from `DataLoader`.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 75\u001b[0;31m         \u001b[0;32mfor\u001b[0m \u001b[0mb\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdl\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32myield\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mproc_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     76\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mclassmethod\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/fastai/basic_data.py\u001b[0m in \u001b[0;36mproc_batch\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m     67\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mproc_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m->\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     68\u001b[0m         \u001b[0;34m\"Process batch `b` of `TensorImage`.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 69\u001b[0;31m         \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mto_device\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     70\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mf\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlistify\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtfms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/fastai/torch_core.py\u001b[0m in \u001b[0;36mto_device\u001b[0;34m(b, device)\u001b[0m\n\u001b[1;32m    121\u001b[0m     \u001b[0;34m\"Recursively put `b` on `device`.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m     \u001b[0mdevice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mifnone\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdefaults\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 123\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mrecurse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_blocking\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    124\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    125\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mdata_collate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mItemsList\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m->\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/fastai/core.py\u001b[0m in \u001b[0;36mrecurse\u001b[0;34m(func, x, *args, **kwargs)\u001b[0m\n\u001b[1;32m     76\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mrecurse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mCallable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m->\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 78\u001b[0;31m     \u001b[0;32mif\u001b[0m \u001b[0mis_listy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mrecurse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mo\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     79\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mis_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;32mreturn\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mrecurse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/fastai/core.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     76\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mrecurse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mCallable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m->\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 78\u001b[0;31m     \u001b[0;32mif\u001b[0m \u001b[0mis_listy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mrecurse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mo\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     79\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mis_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;32mreturn\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mrecurse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/fastai/core.py\u001b[0m in \u001b[0;36mrecurse\u001b[0;34m(func, x, *args, **kwargs)\u001b[0m\n\u001b[1;32m     76\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mrecurse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mCallable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m->\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 78\u001b[0;31m     \u001b[0;32mif\u001b[0m \u001b[0mis_listy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mrecurse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mo\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     79\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mis_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;32mreturn\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mrecurse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/fastai/core.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     76\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mrecurse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mCallable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m->\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 78\u001b[0;31m     \u001b[0;32mif\u001b[0m \u001b[0mis_listy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mrecurse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mo\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     79\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mis_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;32mreturn\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mrecurse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/fastai/core.py\u001b[0m in \u001b[0;36mrecurse\u001b[0;34m(func, x, *args, **kwargs)\u001b[0m\n\u001b[1;32m     78\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mis_listy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mrecurse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mo\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mis_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;32mreturn\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mrecurse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 80\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mfirst_el\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m->\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/fastai/torch_core.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m    121\u001b[0m     \u001b[0;34m\"Recursively put `b` on `device`.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m     \u001b[0mdevice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mifnone\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdefaults\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 123\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mrecurse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_blocking\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    124\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    125\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mdata_collate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mItemsList\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m->\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nEmc5qhJQqYYAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8jwbpcvQHBsW",
        "colab_type": "text"
      },
      "source": [
        "#### Interpretation\n",
        "\n",
        "https://towardsdatascience.com/collaborative-filtering-with-fastai-3dbdd4ef4f00"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jPlbZKPxGnXe",
        "colab_type": "code",
        "outputId": "a8231c5c-0a50-40e0-ec4e-76d3bfc7ef9d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        }
      },
      "source": [
        "g = dflearn.groupby('productID')['rating'].count()\n",
        "top_ratings = g.sort_values(ascending=False).index.values[:1000]\n",
        "top_ratings = top_ratings.astype(str)\n",
        "top_ratings"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['B005LERHD8', 'B005GYGD7O', 'B000T9VK56', 'B002RADHJC', ..., 'B005LMTW6K', 'B007BZ5CUU', 'B000SMNL2E',\n",
              "       'B003YJ4RYO'], dtype='<U10')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9GQXiaFrHBDX",
        "colab_type": "code",
        "outputId": "ddd46533-54cc-43f1-e251-9d8671de92c7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 138
        }
      },
      "source": [
        "# get biases for top products\n",
        "product_bias = learn.bias(top_ratings, is_item=True)\n",
        "\n",
        "# get mean ratings\n",
        "mean_ratings = dflearn.groupby('productID')['rating'].mean()\n",
        "product_ratings = [(b, top_ratings[i], mean_ratings.loc[tb]) for i, (tb, b) in enumerate(zip(top_ratings, product_bias))]\n",
        "\n",
        "# print product bias information\n",
        "item0 = lambda o:o[0]\n",
        "print(sorted(product_ratings, key=item0)[:15])\n",
        "print(sorted(product_ratings, key=item0, reverse=True)[:15])\n",
        "\n",
        "# get weights\n",
        "product_w = learn.weight(top_ratings, is_item=True)\n",
        "\n",
        "# transform weights to 3 dimensions\n",
        "product_pca = product_w.pca(3)\n",
        "\n",
        "# get prinicipal components\n",
        "fac0,fac1,fac2 = product_pca.t()\n",
        "product_comp = [(f, i) for f,i in zip(fac0, top_ratings)]\n",
        "\n",
        "# print fac0 information\n",
        "print(sorted(product_comp, key=itemgetter(0), reverse=True)[:10])\n",
        "print(sorted(product_comp, key=itemgetter(0))[:10])\n",
        "\n",
        "# print fac1 information\n",
        "product_comp = [(f, i) for f,i in zip(fac1, top_ratings)]\n",
        "print(sorted(product_comp, key=itemgetter(0), reverse=True)[:10])\n",
        "print(sorted(product_comp, key=itemgetter(0))[:10])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[(tensor(-0.5461), 'B00DNV1IJK', 1.75), (tensor(-0.3846), 'B00DM0587K', 2.1176470588235294), (tensor(-0.3827), 'B004WKRAB6', 1.8333333333333333), (tensor(-0.3705), 'B00FEEA4MG', 2.12), (tensor(-0.3614), 'B00AFPZBUY', 2.0625), (tensor(-0.3535), 'B00DMWQLB0', 2.4358974358974357), (tensor(-0.3532), 'B00FF394VI', 2.238095238095238), (tensor(-0.3383), 'B007HXMQXM', 2.0), (tensor(-0.3336), 'B002K6F79G', 2.706896551724138), (tensor(-0.3070), 'B00A76LPU6', 2.0), (tensor(-0.3044), 'B003WJRVHG', 2.5), (tensor(-0.2994), 'B003QMMSZ4', 2.3823529411764706), (tensor(-0.2947), 'B00IE5QR64', 2.2083333333333335), (tensor(-0.2865), 'B00CJF46K4', 2.263157894736842), (tensor(-0.2865), 'B007KR07ZY', 2.44)]\n",
            "[(tensor(0.7449), 'B002PHLVJA', 4.339285714285714), (tensor(0.6328), 'B0013KDS96', 4.483870967741935), (tensor(0.6168), 'B0058XIMMM', 3.961038961038961), (tensor(0.5877), 'B0068VM5T4', 4.191489361702128), (tensor(0.5668), 'B0019MPRJW', 4.291666666666667), (tensor(0.5556), 'B002KMI7OC', 4.041666666666667), (tensor(0.5549), 'B000DZUGOM', 3.9583333333333335), (tensor(0.5515), 'B007NLX16O', 3.9178082191780823), (tensor(0.5333), 'B008KK0ZJ8', 4.088888888888889), (tensor(0.5302), 'B00BNB36ZG', 4.225806451612903), (tensor(0.5296), 'B000WUOVXK', 4.4), (tensor(0.5148), 'B000FBO0DM', 3.977272727272727), (tensor(0.5140), 'B000LFG4A4', 4.5), (tensor(0.5110), 'B000MQWYM4', 4.583333333333333), (tensor(0.5098), 'B000FH4JJQ', 4.1)]\n",
            "[(tensor(1.7437), 'B005LERHD8'), (tensor(1.5088), 'B000T9VK56'), (tensor(1.4076), 'B00BNB3A0W'), (tensor(1.3657), 'B000O32MLI'), (tensor(1.1170), 'B000QW6LE6'), (tensor(1.0185), 'B003NX87U6'), (tensor(0.9222), 'B00CN47GXA'), (tensor(0.9168), 'B007BHXBQ0'), (tensor(0.9006), 'B003RYZY8E'), (tensor(0.8941), 'B000EX15NY')]\n",
            "[(tensor(-1.0942), 'B0053XF2U2'), (tensor(-1.0021), 'B00F9RNVM8'), (tensor(-0.9695), 'B00E1JPW0E'), (tensor(-0.9354), 'B008WYDP1C'), (tensor(-0.9256), 'B006PGGJOE'), (tensor(-0.9197), 'B000FH4JJQ'), (tensor(-0.8455), 'B007GB6WHQ'), (tensor(-0.8449), 'B000KEG4V0'), (tensor(-0.8434), 'B000PH25X8'), (tensor(-0.7864), 'B004R1II48')]\n",
            "[(tensor(1.3209), 'B00F9RNVM8'), (tensor(1.1346), 'B0018KU696'), (tensor(1.1038), 'B0083S18LQ'), (tensor(1.1026), 'B005GYGD7O'), (tensor(1.0269), 'B000OWC1HE'), (tensor(1.0032), 'B000DZUGOM'), (tensor(0.8755), 'B000KEG4V0'), (tensor(0.8259), 'B00020BFSE'), (tensor(0.8219), 'B0044GAOXO'), (tensor(0.7849), 'B00D1MR8YU')]\n",
            "[(tensor(-1.4264), 'B008X0EW44'), (tensor(-1.0267), 'B00CIBCJ62'), (tensor(-0.9165), 'B005CSNVS8'), (tensor(-0.9001), 'B002RADHJC'), (tensor(-0.8784), 'B0067GUM2W'), (tensor(-0.8495), 'B004L4B7HG'), (tensor(-0.8141), 'B0007MCUTK'), (tensor(-0.7976), 'B004Z1CZDK'), (tensor(-0.7788), 'B000FBO0DM'), (tensor(-0.7749), 'B0011D2FL2')]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vzm89ZoDHzDB",
        "colab_type": "code",
        "outputId": "42ee550f-1de0-4fe2-d2e4-bada984f99d5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 879
        }
      },
      "source": [
        "idxs = np.random.choice(len(top_ratings), 50, replace=False)\n",
        "idxs = list(range(50))\n",
        "X = fac0[idxs]\n",
        "Y = fac2[idxs]\n",
        "plt.figure(figsize=(15,15))\n",
        "plt.scatter(X, Y)\n",
        "for i, x, y in zip(top_ratings[idxs], X, Y):\n",
        "    plt.text(x,y,i, color=np.random.rand(3)*0.7, fontsize=11)\n",
        "plt.title('Weight Embedding visualization')\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nP9WR44ed88+c/UXB9JbD2Za6fY1+mfCqrMKa8wrPas6Z961mzv5CR4/uU15+Qdvhw3vUrl60pr/0\ng6a9OFpv33SfrP1JmjXnK73+7XMK9vHV8nenK/GdqVqStFyT/5x57nY0LmmvTUsq8rxsScrKc+i1\naUlyOBxasHyx6teJ0DVdr9boKWOVmZWpzKxMjZ4yVv2u6CVJtvseHnyfvpnwX+eQVofDoaffe0nt\nWrRRiwbNJElhIXUU4Oevj3/8whke28XEa/K8qdqWlqq4Ji0lSdX8q6pDy7aavWS+JCl5+xbtPbhP\nEbXCbO+b/t36auaiOZKkvQf2ae3m9cXuEgtcTM72yvyJkgZLGln4ecL/TmCMCZB0wrKsbGNMdUnt\nJL16lusFAKBU8a36yNe3hizLofFTv9b7C39R6iGHsnJylOnXVl27tNHc+d+pdf3Gmr9uiapX8dGm\n7Um68743JUnTPnhEAZV8JUm1qoXIrXJVNWncXnv2bFPa/l0KqVpwhYeXZyVVr15bXbvcrszMo5o9\n92u5eflp2+6dCqxcWatWz5CHRyW1aX2tIoPDNHvzJr34zYvOOr3dPVSjiq9mL5uhfp36S5K2b1+r\n45a7XF1cVS84TNtSV0mSOnccpMpelfTa9MnavXtrsW1OT0/S3n3bdXmnwXJ1ddPL0/vrhYEPycXF\nRb6VfNS9RWct2rBUV8dd8Y/ue1wa0g9lFms7tu5jrd/grvgV3mpYL1qP3/GwAnz91atzT8UP7CJJ\nGnBlf+fNdDq0bGurL7JOPX038jM99+F/tP/QAe09sE/d2nbR58+/V6Se9i3aaPysyWrRsODMfHCN\nIElSy0Yx8vL0ck739vCRuu+lR/Xkuy/I3c1Nnz73rvx9/Jz9ve8fIDdXV+frRYV3nn38jWf00sd/\n/Un75JBhurJjdz37r+G698WH9fGYL2WM0TP3Pq6osPpnvI+BC4Upaxz6385sTDVJYyTVkZSqgseG\nHDDGxEq6x7KsO40xbSV9IsmhgjOib1uW9cXfLTs2NtZKTEy0XRsA4NI0bfrHatP6Wvn61tAvy1KV\nljRBfu/9JDcPo5dDT2hgRhU1ahyny/7VW8+P+1yBRyzVXZuiH32z9FmHWxV55x1KeOI63dX5asWl\nSdN/G6PvKx/Vq017Sh0b64Vff9IdXhEKWrNF812PaKXLCd2+KVMNH3pYqwMO6efVq3U8ZZvu2J4r\n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\n",
            "text/plain": [
              "<Figure size 1080x1080 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hbTWQdbZKKci",
        "colab_type": "text"
      },
      "source": [
        "### EmeddingNN"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ntNPlNsTKK10",
        "colab_type": "code",
        "outputId": "c4c9c769-45c9-49a7-d758-e73a27741007",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        }
      },
      "source": [
        "learn = collab_learner(data, use_nn=True, emb_szs={'userID': 40, 'productID':40}, layers=[256, 128], y_range=(1, 5))\n",
        "learn.fit_one_cycle(n_cicles, 1e-3, wd=0.1)\n",
        "\n",
        "# learn.save('amazon-reviews-nn-1')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: left;\">\n",
              "      <th>epoch</th>\n",
              "      <th>train_loss</th>\n",
              "      <th>valid_loss</th>\n",
              "      <th>time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <td>0</td>\n",
              "      <td>1.554257</td>\n",
              "      <td>1.541976</td>\n",
              "      <td>00:12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1</td>\n",
              "      <td>1.408519</td>\n",
              "      <td>1.532290</td>\n",
              "      <td>00:12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2</td>\n",
              "      <td>1.254700</td>\n",
              "      <td>1.529024</td>\n",
              "      <td>00:12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>3</td>\n",
              "      <td>0.931803</td>\n",
              "      <td>1.697211</td>\n",
              "      <td>00:12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>4</td>\n",
              "      <td>0.526491</td>\n",
              "      <td>1.839973</td>\n",
              "      <td>00:12</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eat9eaqXMWZq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "interp = ClassificationInterpretation.from_learner(learn)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MRrB63RqNA9F",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# interp.confusion_matrix()"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}